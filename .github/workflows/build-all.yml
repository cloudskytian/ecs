name: Build All Platforms

on:
  push:
    branches:
      - 'android-app'
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-desktop:
    name: Build Desktop Apps
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # macOS builds
          - os: macos-latest
            platform: darwin
            arch: arm64
            name: macos-arm64
          - os: macos-latest
            platform: darwin
            arch: amd64
            name: macos-amd64
          
          # Windows builds
          - os: windows-latest
            platform: windows
            arch: arm64
            name: windows-arm64
          - os: windows-latest
            platform: windows
            arch: amd64
            name: windows-amd64
          
          # Linux builds
          - os: ubuntu-latest
            platform: linux
            arch: arm64
            name: linux-arm64
          - os: ubuntu-latest
            platform: linux
            arch: amd64
            name: linux-amd64
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.x'
          cache: true
      
      - name: Install Fyne CLI
        run: go install fyne.io/fyne/v2/cmd/fyne@latest
      
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      
      - name: Configure Git for Private Modules
        run: |
          git config --global url."https://${{ secrets.GHT }}@github.com/".insteadOf "https://github.com/"
        env:
          GITHUB_TOKEN: ${{ secrets.GHT }}
      
      - name: Download dependencies
        run: go mod download
        env:
          GOPRIVATE: github.com/oneclickvirt/security
      
      - name: Verify dependencies
        run: go mod verify
      
      - name: Get version info
        id: version
        shell: bash
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            APP_VERSION=${VERSION#v}
          else
            APP_VERSION="0.0.1"
            VERSION=v0.0.1-$(date +%Y%m%d)-$(git rev-parse --short HEAD)
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"
      
      - name: Update FyneApp.toml version
        shell: bash
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            sed -i "s/Version = .*/Version = \"${{ steps.version.outputs.VERSION }}\"/" FyneApp.toml
          else
            sed -i '' "s/Version = .*/Version = \"${{ steps.version.outputs.VERSION }}\"/" FyneApp.toml || sed -i "s/Version = .*/Version = \"${{ steps.version.outputs.VERSION }}\"/" FyneApp.toml
          fi
          cat FyneApp.toml
      
      - name: Build for ${{ matrix.name }}
        env:
          GOPRIVATE: github.com/oneclickvirt/security
        shell: bash
        run: |
          mkdir -p .build
          
          # Build the package
          fyne package -os ${{ matrix.platform }}/${{ matrix.arch }} -name goecs
          
          # Package the output
          if [ "${{ matrix.platform }}" == "darwin" ]; then
            if [ -d goecs.app ]; then
              tar -czf .build/goecs-${{ matrix.name }}-${{ steps.version.outputs.VERSION }}.tar.gz goecs.app
              echo "macOS app 构建成功"
            else
              echo "macOS app 构建失败"
              exit 1
            fi
          elif [ "${{ matrix.platform }}" == "windows" ]; then
            if [ -f goecs.exe ]; then
              mv goecs.exe .build/goecs-${{ matrix.name }}-${{ steps.version.outputs.VERSION }}.exe
              echo "Windows exe 构建成功"
            else
              echo "Windows exe 构建失败"
              exit 1
            fi
          elif [ "${{ matrix.platform }}" == "linux" ]; then
            if [ -f goecs ]; then
              tar -czf .build/goecs-${{ matrix.name }}-${{ steps.version.outputs.VERSION }}.tar.gz goecs
              echo "Linux binary 构建成功"
            else
              echo "Linux binary 构建失败"
              exit 1
            fi
          fi
      
      - name: List build artifacts
        shell: bash
        run: |
          ls -lh .build/
          du -sh .build/*
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: goecs-${{ matrix.name }}-${{ steps.version.outputs.VERSION }}
          path: .build/*
          retention-days: 90
      
      - name: Commit build files
        if: github.event_name == 'push' && github.ref == 'refs/heads/android-app'
        shell: bash
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .build/*
          git commit -m "chore: update ${{ matrix.name }} build - ${{ steps.version.outputs.VERSION }}" || echo "No changes to commit"
          git push || echo "No changes to push"

  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.x'
          cache: true
      
      - name: Install Fyne CLI
        run: go install fyne.io/fyne/v2/cmd/fyne@latest
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Install Android SDK
        uses: android-actions/setup-android@v3
      
      - name: Install Android NDK
        run: |
          sdkmanager --install "ndk;25.2.9519653"
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> $GITHUB_ENV
      
      - name: Install Android Build Tools
        run: |
          sdkmanager --install "build-tools;33.0.2"
          sdkmanager --install "platforms;android-33"
      
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      
      - name: Configure Git for Private Modules
        run: |
          git config --global url."https://${{ secrets.GHT }}@github.com/".insteadOf "https://github.com/"
        env:
          GITHUB_TOKEN: ${{ secrets.GHT }}
      
      - name: Download dependencies
        run: go mod download
        env:
          GOPRIVATE: github.com/oneclickvirt/security
      
      - name: Verify dependencies
        run: go mod verify
      
      - name: Get version info
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            APP_VERSION=${VERSION#v}
          else
            APP_VERSION="0.0.1"
            VERSION=v0.0.1-$(date +%Y%m%d)-$(git rev-parse --short HEAD)
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"
      
      - name: Update FyneApp.toml version
        run: |
          sed -i "s/Version = .*/Version = \"${{ steps.version.outputs.VERSION }}\"/" FyneApp.toml
          cat FyneApp.toml
      
      - name: Build Android APK (arm64)
        env:
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
          GOPRIVATE: github.com/oneclickvirt/security
        run: |
          fyne package --os android --app-id com.oneclickvirt.goecs --appVersion "${{ steps.version.outputs.APP_VERSION }}"
          if [ -f *.apk ]; then
            mkdir -p .build
            mv *.apk .build/goecs-android-arm64-${{ steps.version.outputs.VERSION }}.apk
            echo "ARM64 APK 构建成功"
          else
            echo "ARM64 APK 构建失败"
            exit 1
          fi
      
      - name: Build Android APK (x86_64)
        env:
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
          GOPRIVATE: github.com/oneclickvirt/security
        run: |
          fyne package --os android/amd64 --app-id com.oneclickvirt.goecs --appVersion "${{ steps.version.outputs.APP_VERSION }}"
          if [ -f *.apk ]; then
            mv *.apk .build/goecs-android-x86_64-${{ steps.version.outputs.VERSION }}.apk
            echo "x86_64 APK 构建成功"
          else
            echo "x86_64 APK 构建失败"
            exit 1
          fi
      
      - name: List build artifacts
        run: |
          ls -lh .build/
          du -sh .build/*.apk
      
      - name: Upload ARM64 APK
        uses: actions/upload-artifact@v4
        with:
          name: goecs-android-arm64-${{ steps.version.outputs.VERSION }}
          path: .build/goecs-android-arm64-${{ steps.version.outputs.VERSION }}.apk
          retention-days: 90
      
      - name: Upload x86_64 APK
        uses: actions/upload-artifact@v4
        with:
          name: goecs-android-x86_64-${{ steps.version.outputs.VERSION }}
          path: .build/goecs-android-x86_64-${{ steps.version.outputs.VERSION }}.apk
          retention-days: 90
      
      - name: Commit APK files
        if: github.event_name == 'push' && github.ref == 'refs/heads/android-app'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .build/*.apk
          git commit -m "chore: update Android APK builds - ${{ steps.version.outputs.VERSION }}" || echo "No changes to commit"
          git push || echo "No changes to push"
